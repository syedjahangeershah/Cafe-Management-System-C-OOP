#include <iostream>
#include <fstream>
#include "NewItem.h"
#include "Manager.h"
using namespace std;

int totalItems = 0;					// Global Variable

void menu(int choice) {
	if (choice == 0) {
		cout << "\n\t(((((((((((((((((((((((((( Welcome to ))))))))))))))))))))))))))\n\t"
			"((((((((((((((((((((( Cafe Management System )))))))))))))))))))\n\n";
	}
	else if (choice == 1) {
		cout << "\t| Press [1] for management panel\n\t| "
			<< "Press [2], if you're teacher\n\t| "
			<< "Press [3], if you're student\n\t| "
			<< "Press [4] to shutdown the system\n\t  > ";
	}
	else if (choice == 2) {
		cout << "\t| Press [1] to view all the items\n\t| "
			<< "Press [2] to add a new item\n\t| "
			<< "Press [3] to remove an item\n\t| "
			<< "Press [4] to edit a specific item\n\t| "
			<< "Press [5] to view sales report\n\t| "
			<< "Press [6] to reset sales report\n\t| "
			<< "Press [7] to logout\n\t  > ";
	}
	else if (choice == 3) {
		cout << "\t| Press [1] to edit name\n\t| "
			<< "Press [2] to edit item price\n\t| "
			<< "Press [3] to edit item quantity\n\t| "
			<< "Press [4] to edit item category\n\t| "
			<< "Press [5] to edit item type\n\t| "
			<< "Press [6] to edit whole to item\n\t  > ";
	}
}
Item* readItems(Item*, int);
void writeItems(Item*);
Item* addItem(Manager&, NewItem&);
Item* removeItem(Manager&, int);
void displayAllItems(Item*);
Item* editItem(Manager&, int, int);
bool isItemFound(Item*, int);
bool isItemAvailable(Item* item, int itemNumber);
void placeOrder(Item* item, int itemNumber, bool check);

int main() {					// ===============> Main function starts here <===============

	int choice;
mainMenu:						// Main menu on start of the Program
	menu(0);
	menu(1);
	cin >> choice;

	if (choice == 1) {			// If choice is 1, then 'Manager' object will create and all the
		Manager manager;		// the manipulation will done with the help of manager's object
	tryAgain:
		manager.setLogin();								// verify user's credentials
		if (manager.getLogin().checkCredentials()) {	// if 0K, then proceed, otherwise error will appear
			system("cls");
			cout << "\tYou've successfully logged in!!!\n";

		menu(0);
		adminPanel:										// When user logged in successfully, the admin panel will
			menu(2);
		choice:
			Item* item = new Item[1];
			item = readItems(item, -1);					// show up, for further decisions.
			manager.setItem(item, totalItems);
			cin >> choice;
			cin.ignore();
			if (choice == 1) {							// choice 1 for display menu
				system("cls");
				menu(0);
				displayAllItems(manager.getItem());
				goto adminPanel;
			}
			else if (choice == 2) {						// choice 2 for add new item in the inventory
				NewItem newItem;
				cin >> newItem;

				writeItems(addItem(manager, newItem));
				system("cls");
				menu(0);
				cout << "\tNew item [" << newItem.getName() << "] added to database successfully!!!\n";
				goto adminPanel;
			}
			else if (choice == 3) {						// choice 3 for remove a specific item from the inventory
				int itemNumber;
				displayAllItems(manager.getItem());
				cout << "\tEnter item number to remove : ";
				cin >> itemNumber;					// item number will be asked to remove a particular item
				if (!isItemFound(manager.getItem(), itemNumber - 1)) {
					system("cls");
					cout << "\n\t[Error] Item not found";
					menu(0);
					goto adminPanel;
				}
				else {
					cin.ignore();
					system("cls");
					menu(0);
					cout << "\t| Item -> " << itemNumber << "\n"
						<< manager.getItem()[itemNumber - 1];
					writeItems(removeItem(manager, itemNumber - 1));
					cout << "\t removed succefully!!!\n";
					goto adminPanel;
				}
			}
			else if (choice == 4) {						// choice 4 for edit a specific item from items in the inventory
				int itemNumber;
				displayAllItems(manager.getItem());
				cout << "\t| Enter item number to edit : ";
				cin >> itemNumber;
				if (!isItemFound(manager.getItem(), itemNumber - 1)) {		// if item not found, throw error
					system("cls");
					menu(0);
					cout << "\t[Error] Item not found\n\n";
					goto adminPanel;
				}
				else {
					system("cls");
					menu(0);
					std::cout << "\tItem number : " << itemNumber << "\n"
						<< manager.getItem()[itemNumber - 1];
					menu(3);
					cin >> choice;
					cin.ignore();
					writeItems(editItem(manager, itemNumber - 1, choice));
					system("cls");
					menu(0);
					cout << "\t| Item number " << itemNumber << " editied succefully\n"
						<< "\t-----------------------------------\n";
					goto adminPanel;
				}
			}
			else if (choice == 5) {					// choice 5 to show total revenue generated by sales
				system("cls");
				menu(0);
				manager.viewSalesReport();
				cout << "\t|--------------------------------------------------------\n";
				goto adminPanel;
			}
			else if (choice == 6) {				// choice 6 to reset the balance to 0
				manager.resetSalesReport();
				system("cls");
				menu(0);
				cout << "\t| Reports have been reset successfully!!!\n\t"
					"-----------------------------------------\n";
				goto adminPanel;
			}
			else if (choice == 7) {				// choice 7 to log out.
				system("cls");
				cout << "\tLogged out succefully!!!\n";
				goto mainMenu;
			}
			else {
				cout << "\tInvalid input, Please try again!!!\n\t  > ";
				goto choice;
			}
		}
		else {
			system("cls");
			menu(0);
			cout << "\tInvlid try. Username or password is wrong.\n";
		tryAgainMenu:
			cout << "\t| Press [1] to try again\n\t| Press [2] to return to the main menu\n\t  > ";
			cin >> choice;
			if (choice == 1)
				goto tryAgain;
			else if (choice == 2) {
				system("cls");
				goto mainMenu;
			}
			else {
				system("cls");
				menu(0);
				cout << "\tInvalid choice. Please try again!!!\n";
				goto tryAgainMenu;
			}
		}
	}
	else if (choice == 2) {							// // // Choice 2 for customer only. Here the customers will be
		system("cls");								//   //		teachers
		menu(0);
		cout << "\t!!! Welcome Teachers !!\n";
		Item* item = new Item[1];
		item = readItems(item, -1);
	itemMenu:
		displayAllItems(item);
		int choice;

		cout << "\t| Enter item number to place order : ";
		cin >> choice;
		if (isItemAvailable(item, choice - 1))
			placeOrder(item, choice - 1, 1);
		else {
			system("cls");
			menu(0);
			cout << "\t| We're really sorry, this item is sold "
				<< "out.\n\t| Please try buying something else !!!\n\t|"
				<< "-------------------------------------\n";
			goto itemMenu;
		}
		system("cls");
		menu(0);
		cout << "\t Congratulation, you've succefully placed order.!!!\n\t "
			<< "Please pay " << item[choice - 1].getPrice() <<
			" at counter and\n\t collect your " << item[choice - 1].getCategory() << " from the counter.\n\t "
			<< "=> { Thank U } <=\n";
	teacherInvalidTry:
		cout << "\t| Press [1] to go back to the menu\n\t| "
			<< "Enter [-99] to finish ordering\n\t  > ";
		cin >> choice;
		if (choice == 1)
			goto itemMenu;
		else if (choice == -99) {
			system("cls");
			goto mainMenu;
		}
		else {
			system("cls");
			menu(0);
			cout << "\tInvalid choice. Please try again\n";
			goto teacherInvalidTry;
		}
	}
	else if (choice == 3) {											// // // Choice 3 for customer only. Here the customers will be
		cout << "\t!! Welcome Students !!\n";						//   //		Students
		Item* item = new Item[1];
		item = readItems(item, -1);
	itemMenu2:
		//displayAllItems(item);
		int counter = 0;
		for (int i = 0; i < totalItems; i++) {
			if (!(item[i].compare(item[i].getType(), (char*)"Teacher"))) {
				cout << "\t==============================\n"
					<< "\t| Item -> " << counter++ + 1 << "\n"
					<< item[i];
			}
		}
		int choice;
		cout << "\t| Enter item number to place order : ";
		cin >> choice;
		if (isItemAvailable(item, choice - 1)) {
			counter = 0;
			for (int i = 0; i < totalItems; i++) {
				if (!(item[i].compare(item[i].getType(), (char*)"Teacher"))) {
					counter++;
					if (counter == choice) {
						placeOrder(item, i, 0);
						choice = i;
						break;
					}
				}
			}
		}
		else {
			system("cls");
			menu(0);
			cout << "\t| We're really sorry, this item is sold "
				<< "out.\n\t| Please try buying something else !!!\n\t|"
				<< "-------------------------------------\n";
			goto itemMenu2;
		}
		system("cls");
		menu(0);
		cout << "\t Congratulation, you've succefully placed order.!!!\n\t "
			<< "Please pay " << item[choice].getPrice() <<
			" at counter and\n\t collect your " << item[choice - 1].getCategory() << " from the counter.\n\t "
			<< "=> { Thank U } <=\n";
	studentInvalidTry:
		cout << "\t| Press [1] to go to back menu\n\t| "
			<< "Enter [-99] to exit\n\t  > ";
		cin >> choice;
		if (choice == 1)
			goto itemMenu2;
		else if (choice == -99) {
			system("cls");
			goto mainMenu;
		}
		else {
			system("cls");
			menu(0);
			cout << "\tInvalid choice. Please try again\n";
			goto studentInvalidTry;
		}
	}
	else if (choice == 4) {								// Choice 4 is for admins only.
		tryAgain1:
		Manager manager;
		manager.setLogin();
		if (manager.getLogin().checkCredentials())
			cout << "\n\tExit succefull!!!\n";
		else {
			system("cls");
			cout << "\tInvlid try. Username or password is wrong.\n";
		tryAgainMenu1:
			cout << "\t| Press [1] to try again\n\t| Press [2] to return to the main menu\n\t  > ";
			cin >> choice;
			if (choice == 1)
				goto tryAgain1;
			else if (choice == 2)
				goto mainMenu;
			else {
				system("cls");
				cout << "\tInvalid choice. Please try again!!!\n";
				goto tryAgainMenu1;
			}
		}
	}
	else {
		system("cls");
		cout << "\tInvalid choice. Please try again!!!\n";
		goto mainMenu;
	}
	return 0;
}

// This function display all the items present in the inventory
void displayAllItems(Item* item) {
	cout << "\tThere are total " << totalItems << " items in our inventory\n"
		<< "\t==============================\n";
	for (int i = 0; i < totalItems; i++) {
		cout << "\t| Item -> " << i + 1 << "\n"
			<< item[i];
	}
}

// This function add a new item in inventory
Item* addItem(Manager& manager, NewItem& newItem) {
	manager.addItem(newItem, totalItems);
	totalItems++;
	return manager.getItem();
}

// This item reads the items from the inventory
Item* readItems(Item* item, int student) {
	ifstream in("items.txt");
	in >> totalItems;
	Item* temp = new Item[totalItems];
	Item tempItem;
	in.ignore();
	int counter = 0, count = 0;
	for (int i = 0; i < totalItems; i++)
	{
		in >> tempItem;
		if (student == 1) {
			if (!(tempItem.compare(tempItem.getType(), (char*)"Teacher")))
				temp[counter++] = &tempItem;
			else count++;
		}
		else temp[counter++] = &tempItem;
	}
	totalItems -= count;
	in.close();
	delete[] item;
	item = nullptr;
	return temp;
}

// This item write the items in inventory
void writeItems(Item* item) {
	ofstream out("items.txt");
	out << totalItems << "\n";
	for (int i = 0; i < totalItems; i++) {
		out << item[i].getName() << ","
			<< item[i].getPrice() << ","
			<< item[i].getQuantity() << ","
			<< item[i].getType() << ","
			<< item[i].getCategory() << "\n";
	}
	out.close();
}

// This function edit a sepecif item
Item* editItem(Manager& manager, int indexToEdit, int attribute) {
	
	char* name = new char[50];
	int num;
	double price;
	if (attribute == 1) {
		cout << "\t| Enter new name of item : ";
		cin.getline(name, 50);
		manager.getItem()[indexToEdit].setName(name);
		return manager.getItem();
	}
	else if (attribute == 2) {
		cout << "\t| Enter new price of item : ";
		cin >> price;
		manager.getItem()[indexToEdit].setPrice(price);
		return manager.getItem();
	}
	else if (attribute == 3) {
		int num;
		cout << "\t| Enter quantities of item : ";
		cin >> num;
		manager.getItem()[indexToEdit].setQuantity(num);
		return manager.getItem();
	}
	else if (attribute == 4) {
		cout << "\t| Enter category of new item : ";
		cin.getline(name, 50);
		manager.getItem()[indexToEdit].setCategory(name);
		return manager.getItem();
	}
	else if (attribute == 5) {
		cout << "\t| Press [1] to set item type 'teachers'\n\t| "
			<< "Press [2] to set item type both[teachers and students]\n\t  > ";
		cin >> num;
		char teacher[]{ "Teacher" }, both[]{ "both" };
		if (num == 1) {
			manager.getItem()[indexToEdit].setType(teacher);
		}
		else if (num == 2) {
			manager.getItem()[indexToEdit].setType(both);
		}
		else manager.getItem()[indexToEdit].setType(both);
		return manager.getItem();
	}
	else if (attribute == 6) {
		cout << "\t| Enter new name of item : ";
		cin.getline(name, 50);
		manager.getItem()[indexToEdit].setName(name);

		cout << "\t| Enter new price of item : ";
		cin >> price;

		cout << "\t| Enter quantity of new item : ";
		cin >> num;
		manager.getItem()[indexToEdit].setQuantity(num);

		cin.ignore();
		cout << "\t| Enter category of new item : ";
		cin.getline(name, 50);
		manager.getItem()[indexToEdit].setCategory(name);

		cout << "\t| Press [1] to set item type 'teachers'\n\t| "
			<< "Press [2] to set item type both[teachers and students]\n\t  > ";
		cin >> num;
		char teacher[]{ "Teacher" }, both[]{ "both" };
		if (num == 1) {
			manager.getItem()[indexToEdit].setType(teacher);
		}
		else if (num == 2) {
			manager.getItem()[indexToEdit].setType(both);
		}
		else manager.getItem()[indexToEdit].setType(both);
		return manager.getItem();
	}
	else{
		cout << "\t Invalid choice\n. Please try again!!!\n";
		return manager.getItem();
	}
	return manager.getItem();
}

//This function removes a specific item from the inventory
Item* removeItem(Manager& manager, int indexToIgnore) {
	manager.removeItem(totalItems, indexToIgnore);
	totalItems--;
	return manager.getItem();
}

// This function checks if the desired item is available or not
// in inventory
bool isItemFound(Item* item, int itemNumber) {
	if (itemNumber > totalItems || itemNumber < 0)
		return false;
	return true;
}

// This item checks if the Quantity of deseired item is avaiable
// or not in the inventory
bool isItemAvailable(Item* item, int itemNumber) {
	if (isItemFound(item, itemNumber)) {
		int quantity = item[itemNumber].getQuantity();
		if (quantity != 0 && quantity > 0)
			return true;
	}
	return false;
}

// This function places the order from customer, increase balance
// and then decrease the Qunatity of oredered item.
void placeOrder(Item* item, int itemNumber, bool check) {
	ifstream in("sales.txt");
	double totalSalesRevenue, teacherItemSaleRevenue, studentItemSaleRevenue;
	in >> totalSalesRevenue;
	in.ignore();
	in >> teacherItemSaleRevenue;
	in.ignore();
	in >> studentItemSaleRevenue;
	in.close();
	for (int i = 0; i < totalItems; i++) {
		if (i == itemNumber) {
			totalSalesRevenue += item[i].getPrice();
			if (check)
				teacherItemSaleRevenue += item[i].getPrice();
			else studentItemSaleRevenue += item[i].getPrice();
			break;
		}
	}
	ofstream out("sales.txt");
	out << totalSalesRevenue << "," << teacherItemSaleRevenue << "," << studentItemSaleRevenue << "\n";
	out.close();
	item[itemNumber].setQuantity(item[itemNumber].getQuantity() - 1);
	writeItems(item);
}